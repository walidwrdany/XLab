// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using XLab.Common.Interfaces;
using XLab.Data.Context.Configurations;
using XLab.Data.Models;
#nullable disable

namespace XLab.Data.Context
{
    public partial class ProjectContext : DbContext
    {

        private readonly ICurrentUserService<string> _currentUserService;
        private readonly IDateTimeService _dateTimeService;

        public ProjectContext(
            DbContextOptions options, IDateTimeService dateTimeService,
            ICurrentUserService<string> currentUserService) : base(options)
        {
            _dateTimeService = dateTimeService;
            _currentUserService = currentUserService;
        }

        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Enrolment> Enrolments { get; set; }
        public virtual DbSet<Exam> Exams { get; set; }
        public virtual DbSet<ExamQuestion> ExamQuestions { get; set; }
        public virtual DbSet<ExamStudentAnwer> ExamStudentAnwers { get; set; }
        public virtual DbSet<Instructor> Instructors { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<QuestionAnswer> QuestionAnswers { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Topic> Topics { get; set; }
        

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);



        public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = new())
        {
            ChangeTracker.DetectChanges();
            var entityEntries = ChangeTracker.Entries<IAuditable>().ToList();
            foreach (var entry in entityEntries)
                switch (entry.State)
                {
                    case EntityState.Added:
                        OnAdded(entry);
                        break;
                    case EntityState.Modified:
                        OnModified(entry);
                        break;
                    case EntityState.Deleted:
                        OnDeleted(entry);
                        break;
                }

            return base.SaveChangesAsync(cancellationToken);
        }


        private void OnDeleted(EntityEntry<IAuditable> entry)
        {
            entry.State = EntityState.Modified;
            entry.Entity.IsActive = false;
            entry.Entity.IsDeleted = true;
            OnModified(entry);
        }

        private void OnModified(EntityEntry<IAuditable> entry)
        {
            entry.Entity.ModifiedBy = _currentUserService.UserId;
            entry.Entity.ModifiedAt = _dateTimeService.Now;
        }

        private void OnAdded(EntityEntry<IAuditable> entry)
        {
            entry.Entity.IsActive = true;
            entry.Entity.IsDeleted = false;
            entry.Entity.CreatedBy = _currentUserService.UserId;
            entry.Entity.CreatedAt = _dateTimeService.Now;
            OnModified(entry);
        }
    }
}
